import { useState, useContext, useEffect } from 'react';
import './BillLookup.css';

import useInvoicesApi from '../../hooks/useInvoicesApi';
import { StoreContext } from '../../context/StoreContext';
import { useBillForm } from '../../hooks/useBillForm';
import StatusDisplaySpinner from '../../components/StatusDisplaySpinner/StatusDisplaySpinner';

const BillLookup = () => {
    const { url } = useContext(StoreContext);
    const { invoices, isLoading, error, fetchInvoices, updateInvoiceStatus } = useInvoicesApi(url);

    useEffect(() => {
        fetchInvoices();
    }, []);

    const {
        expandedInvoiceId,
        toggleRow,
        filterPeriod,
        setFilterPeriod,
        selectedDate,
        setSelectedDate,
        handleDateChange,
        pendingSearchTerm,
        handleInputChange,
        handleSearchClick,
        sortCriterion,
        sortOrder,
        handleSort,
        formatDate,
        formatCurrency,
        filteredAndSortedInvoices,
        stats,
        todayCount,
        thisWeekCount,
        thisMonthCount,
    } = useBillForm(invoices);

    const handleConfirmPayment = async (invoiceId, event) => {
        // NgƒÉn ch·∫∑n s·ª± ki·ªán n·ªïi b·ªçt ƒë·ªÉ kh√¥ng l√†m ƒë√≥ng/m·ªü chi ti·∫øt h√≥a ƒë∆°n
        event.stopPropagation();

        // T√πy ch·ªçn: Th√™m m·ªôt c·ª≠a s·ªï x√°c nh·∫≠n ƒë·ªÉ tr√°nh ng∆∞·ªùi d√πng nh·∫•p nh·∫ßm
        const isConfirmed = window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√°c nh·∫≠n h√≥a ƒë∆°n n√†y ƒë√£ thanh to√°n?');
        if (!isConfirmed) {
            return;
        }

        // G·ªçi h√†m c·∫≠p nh·∫≠t t·ª´ hook
        const result = await updateInvoiceStatus(invoiceId, 'completed');
        if (result.success) {
            alert('C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!');
        } else {
            alert('C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    if (isLoading || error) {
        return (
            <div className="bill-lookup">
                <StatusDisplaySpinner isLoading={isLoading} error={error} />
            </div>
        );
    }

    if (error) {
        return (
            <div className="bill-lookup">
                <p className="error-message">‚ùå L·ªói: {error}. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
            </div>
        );
    }

    return (
        <div className="bill-lookup">
            <h2 className="bill-lookup__title">L·ªäCH S·ª¨ H√ìA ƒê∆†N</h2>

            <div className="bill-lookup__controls">
                <div className="bill-lookup__search-sort">
                    <div className="search-bar">
                        <input
                            type="text"
                            placeholder="M√£ h√≥a ƒë∆°n ho·∫∑c t√™n thu ng√¢n..."
                            value={pendingSearchTerm}
                            onChange={handleInputChange}
                            className="search-bar__input"
                        />
                        <button onClick={handleSearchClick} className="search-bar__button">
                            T√¨m ki·∫øm
                        </button>
                    </div>

                    <div className="sort-buttons">
                        <span className="sort-buttons__label">S·∫Øp x·∫øp theo:</span>
                        <button
                            onClick={() => handleSort('date')}
                            className={`sort-buttons__item ${
                                sortCriterion === 'date' ? 'sort-buttons__item--active' : ''
                            }`}
                        >
                            Ng√†y üóìÔ∏è {sortCriterion === 'date' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                        </button>
                        <button
                            onClick={() => handleSort('invoiceCode')}
                            className={`sort-buttons__item ${
                                sortCriterion === 'invoiceCode' ? 'sort-buttons__item--active' : ''
                            }`}
                        >
                            M√£ Hƒê #Ô∏è‚É£ {sortCriterion === 'invoiceCode' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                        </button>
                        <button
                            onClick={() => handleSort('totalAmount')}
                            className={`sort-buttons__item ${
                                sortCriterion === 'totalAmount' ? 'sort-buttons__item--active' : ''
                            }`}
                        >
                            T·ªïng ti·ªÅn üí∞ {sortCriterion === 'totalAmount' && (sortOrder === 'asc' ? '‚Üë' : '‚Üì')}
                        </button>
                    </div>
                </div>

                <div className="filter-buttons">
                    <button
                        onClick={() => {
                            setFilterPeriod('all');
                            setSelectedDate('');
                        }}
                        className={`filter-buttons__item ${
                            filterPeriod === 'all' ? 'filter-buttons__item--active' : ''
                        }`}
                    >
                        T·∫•t c·∫£
                    </button>
                    <button
                        onClick={() => {
                            setFilterPeriod('today');
                            setSelectedDate('');
                        }}
                        className={`filter-buttons__item ${
                            filterPeriod === 'today' ? 'filter-buttons__item--active' : ''
                        }`}
                    >
                        H√¥m nay ({todayCount})
                    </button>
                    <button
                        onClick={() => {
                            setFilterPeriod('thisWeek');
                            setSelectedDate('');
                        }}
                        className={`filter-buttons__item ${
                            filterPeriod === 'thisWeek' ? 'filter-buttons__item--active' : ''
                        }`}
                    >
                        Tu·∫ßn n√†y ({thisWeekCount})
                    </button>
                    <button
                        onClick={() => {
                            setFilterPeriod('thisMonth');
                            setSelectedDate('');
                        }}
                        className={`filter-buttons__item ${
                            filterPeriod === 'thisMonth' ? 'filter-buttons__item--active' : ''
                        }`}
                    >
                        Th√°ng n√†y ({thisMonthCount})
                    </button>
                    <div className="date-picker-container">
                        <span className="sort-buttons__label">T√¨m ki·∫øm theo ng√†y:</span>

                        <input type="date" value={selectedDate} onChange={handleDateChange} className="date-picker" />
                    </div>
                </div>
            </div>

            <div className="bill-list">
                {filteredAndSortedInvoices.length > 0 ? (
                    filteredAndSortedInvoices.map((invoice) => (
                        <div
                            key={invoice._id.$oid}
                            className={`invoice-card ${
                                expandedInvoiceId === invoice._id.$oid ? 'invoice-card--expanded' : ''
                            }`}
                            onClick={() => toggleRow(invoice._id.$oid)}
                        >
                            <div className="invoice-card__summary">
                                <div className="invoice-card__left">
                                    <p className="invoice-card__code">
                                        <span>M√£ h√≥a ƒë∆°n:</span> {invoice.invoiceCode}
                                        {invoice.status !== 'completed' && <span> (Ch∆∞a thanh to√°n)</span>}
                                    </p>
                                    <p className="invoice-card__cashier">
                                        <span>Thu ng√¢n:</span> {invoice.cashier.name}
                                    </p>
                                </div>
                                <div className="invoice-card__right">
                                    <p className="invoice-card__total-amount">{formatCurrency(invoice.totalAmount)}</p>
                                    <p className="invoice-card__date">{formatDate(invoice.invoiceDate.$date)}</p>
                                </div>
                            </div>
                            <div className="invoice-card__details">
                                <div className="details-item">
                                    <span className="details-item__label">Tr·∫°ng th√°i:</span>
                                    <div className="details-item__button-container">
                                        {invoice.status !== 'completed' && (
                                            <button
                                                className="confirm-payment-button"
                                                onClick={(event) => handleConfirmPayment(invoice._id.$oid, event)}
                                            >
                                                X√°c nh·∫≠n ƒë√£ thanh to√°n
                                            </button>
                                        )}
                                        <span
                                            className={`details-item__value ${
                                                invoice.status === 'completed' ? 'status-completed' : 'status-pending'
                                            }`}
                                        >
                                            {invoice.status === 'completed' ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n'}
                                        </span>
                                    </div>
                                </div>
                                <div className="details-item">
                                    <span className="details-item__label">Thanh to√°n:</span>
                                    <span className="details-item__value">{invoice.paymentDetails.method}</span>
                                </div>
                                <div className="details-item">
                                    <span className="details-item__label">Ti·ªÅn nh·∫≠n:</span>
                                    <span className="details-item__value">
                                        {formatCurrency(invoice.paymentDetails.soTienDaNhan)}
                                    </span>
                                </div>

                                <h4 className="details-title">Chi ti·∫øt s·∫£n ph·∫©m</h4>
                                <ul className="details-product-list">
                                    {invoice.items.map((item) => (
                                        <li key={item.productId} className="details-product-item">
                                            <span className="product-name">{item.productName}</span>
                                            <span className="product-info">
                                                {item.quantity} x {formatCurrency(item.unitPrice)}
                                            </span>
                                            <span className="product-total">{formatCurrency(item.totalPrice)}</span>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        </div>
                    ))
                ) : (
                    <p className="no-invoices-message">
                        Kh√¥ng c√≥ h√≥a ƒë∆°n n√†o trong kho·∫£ng th·ªùi gian ho·∫∑c t√¨m ki·∫øm n√†y.
                    </p>
                )}
            </div>

            {/* Th√™m footer th·ªëng k√™ */}
            {filteredAndSortedInvoices.length > 0 && (
                <div className="bill-lookup__footer">
                    <h3 className="footer__title">Th·ªëng K√™ T·ªïng H·ª£p</h3>
                    <div className="footer__grid">
                        {/* Ph·∫ßn t·ª≠ m·ªõi, d√πng ƒë·ªÉ nh√≥m 3 √¥ ƒë·∫ßu ti√™n */}
                        <div className="footer__stats-row">
                            <div className="footer__item">
                                <span className="footer__label">T·ªïng s·ªë h√≥a ƒë∆°n</span>
                                <span className="footer__value footer__value--large">{stats.totalInvoices}</span>
                            </div>
                            <div className="footer__item">
                                <span className="footer__label">T·ªïng SP ƒë√£ b√°n</span>
                                <span className="footer__value footer__value--large">{stats.totalProductsSold}</span>
                            </div>
                            {/* stats.highestInvoice.invoiceCode */}
                            <div className="footer__item">
                                <span className="footer__label">H√≥a ƒë∆°n cao nh·∫•t</span>
                                <span className="footer__value footer__value--large">
                                    {formatCurrency(stats.highestInvoice.totalAmount)}
                                </span>
                            </div>
                        </div>

                        <div className="footer__grid-semi">
                            <div className="footer__item footer__item--full-width">
                                <span className="footer__label">T·ªïng ti·ªÅn c·ªßa t·∫•t c·∫£ c√°c h√≥a ƒë∆°n</span>
                                <span className="footer__value footer__value--revenue">
                                    {formatCurrency(stats.totalRevenue)}
                                </span>
                            </div>

                            <div className="footer__item">
                                <span className="footer__label">h√≥a ƒë∆°n ƒë√£ thanh to√°n</span>
                                <span className="footer__value footer__value--completed">{stats.completedOrders}</span>
                            </div>
                            <div className="footer__item">
                                <span className="footer__label">h√≥a ƒë∆°n ch∆∞a thanh to√°n</span>
                                <span className="footer__value footer__value--pending">{stats.pendingOrders}</span>
                            </div>
                            <div className="footer__item">
                                <span className="footer__label">Chuy·ªÉn kho·∫£n</span>
                                <span className="footer__value">{stats.transferPayments}</span>
                            </div>
                            <div className="footer__item">
                                <span className="footer__label">Ti·ªÅn m·∫∑t</span>
                                <span className="footer__value">{stats.cashPayments}</span>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default BillLookup;
