import { useState, useEffect, useMemo, useContext, memo, useCallback } from 'react';
import './Products.css';
import { StoreContext } from '../../context/StoreContext';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { Link } from 'react-router-dom';
import defaultImage from '../../assets/images/Mystery-products.png';
import StatusDisplaySpinner from '../../components/StatusDisplaySpinner/StatusDisplaySpinner';

// T√°ch ri√™ng component cho m·ªôt h√†ng s·∫£n ph·∫©m ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t.
// S·ª≠ d·ª•ng memo ƒë·ªÉ ngƒÉn vi·ªác render l·∫°i h√†ng khi c√°c props kh√¥ng ƒë·ªïi.
const ProductRow = memo(({ product, urlImage, utilityFunctions }) => {
    const { formatCurrency, convertCategory } = utilityFunctions;

    // S·ª≠ d·ª•ng useCallback ƒë·ªÉ t·∫°o ra m·ªôt h√†m ·ªïn ƒë·ªãnh.
    const handleDetail = useCallback(() => {
        const url = `/sanpham/chitietsanpham/${product._id}`;
        window.open(url, '_blank');
    }, [product._id]);

    return (
        <tr>
            <td style={{ maxWidth: '118px' }}>
                <div style={{ display: 'flex', alignItems: 'center' }}>
                    <div>
                        <img
                            draggable={false}
                            src={`${urlImage}/${product.image}`}
                            alt={product.name || 'S·∫£n ph·∫©m'}
                            className="product-image"
                            onError={(e) => {
                                e.target.src = defaultImage;
                            }}
                        />
                    </div>
                    <div style={{ flex: 1, marginLeft: '10px' }}>{product.productCode}</div>
                </div>
            </td>
            <td>{product.barcode}</td>
            <td style={{ textAlign: 'start', paddingLeft: 20, maxWidth: 400 }}>{product.name}</td>
            <td>{convertCategory(product.category)}</td>
            <td className="price-cell">{formatCurrency(product.sellingPrice)}</td>
            <td>{product.totalQuantity}</td>
            <td style={{ maxWidth: '100px' }}>
                <button className="detail-btn" onClick={handleDetail}>
                    Chi ti·∫øt
                </button>
            </td>
        </tr>
    );
});

const Products = () => {
    const { product_list, utilityFunctions, urlImage } = useContext(StoreContext);
    const { formatCurrency, convertCategory } = utilityFunctions;

    const [isLoading, setIsLoading] = useState(true);

    // State cho ph√¢n trang
    const [currentPage, setCurrentPage] = useState(1);
    const [productsPerPage, setProductsPerPage] = useState(10);
    const [sortOrder, setSortOrder] = useState('desc'); //asc ho·∫∑c desc

    // S·ª≠ d·ª•ng useEffect ƒë·ªÉ ki·ªÉm tra khi d·ªØ li·ªáu ƒë√£ t·∫£i xong
    useEffect(() => {
        if (product_list && product_list.length > 0) {
            setIsLoading(false);
        }
    }, [product_list]);

    // Memoize vi·ªác s·∫Øp x·∫øp s·∫£n ph·∫©m ƒë·ªÉ tr√°nh t√≠nh to√°n l·∫°i kh√¥ng c·∫ßn thi·∫øt
    const sortedProducts = useMemo(() => {
        if (!product_list) return [];
        return [...product_list].sort((a, b) => {
            return sortOrder === 'asc'
                ? a.productCode.localeCompare(b.productCode)
                : b.productCode.localeCompare(a.productCode);
        });
    }, [product_list, sortOrder]);

    const productsToDisplay = useMemo(() => {
        const indexOfLastProduct = productsPerPage === 'all' ? sortedProducts.length : currentPage * productsPerPage;
        const indexOfFirstProduct = productsPerPage === 'all' ? 0 : indexOfLastProduct - productsPerPage;
        return sortedProducts.slice(indexOfFirstProduct, indexOfLastProduct);
    }, [sortedProducts, currentPage, productsPerPage]);

    const totalPages = useMemo(() => {
        if (!sortedProducts) return 1;
        return productsPerPage === 'all' ? 1 : Math.ceil(sortedProducts.length / productsPerPage);
    }, [sortedProducts, productsPerPage]);

    // S·ª≠ d·ª•ng useCallback ƒë·ªÉ c√°c h√†m kh√¥ng b·ªã t·∫°o l·∫°i tr√™n m·ªói l·∫ßn render
    const paginate = useCallback((pageNumber) => setCurrentPage(pageNumber), []);

    const handleProductsPerPageChange = useCallback((e) => {
        const value = e.target.value;
        setProductsPerPage(value);
        setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n khi thay ƒë·ªïi s·ªë s·∫£n ph·∫©m tr√™n m·ªói trang
    }, []);

    const handleSortToggle = useCallback(() => {
        setSortOrder((prevOrder) => (prevOrder === 'asc' ? 'desc' : 'asc'));
    }, []);

    const exportToExcel = useCallback(() => {
        if (!product_list?.length) {
            alert('Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ xu·∫•t!');
            return;
        }

        const confirmExport = window.confirm(
            'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫£i xu·ªëng danh s√°ch s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng file Excel?',
        );
        if (!confirmExport) return;

        const excelData = product_list.map((product) => ({
            'M√£ s·∫£n ph·∫©m': product.productCode,
            'M√£ v·∫°ch': product.barcode,
            'T√™n s·∫£n ph·∫©m': product.name,
            'Nh√≥m h√†ng': convertCategory(product.category),
            'Gi√° nh·∫≠p': product.purchasePrice,
            'Gi√° b√°n': product.sellingPrice,
            'T·ªìn kho': product.totalQuantity,
        }));

        const worksheet = XLSX.utils.json_to_sheet(excelData);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, 'Danh s√°ch s·∫£n ph·∫©m');

        const now = new Date();
        const dateString = `${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(
            2,
            '0',
        )}_${String(now.getDate()).padStart(2, '0')}${String(now.getMonth() + 1).padStart(2, '0')}${now.getFullYear()}`;
        const fileName = `Danh_sach_san_pham_${dateString}.xlsx`;

        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
        const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });
        saveAs(blob, fileName);
    }, [product_list, convertCategory]);

    const renderPaginationButtons = useCallback(() => {
        const pageNumbers = [];
        const maxPageButtons = 5;
        const totalPagesCount = totalPages;

        let startPage = 1;
        let endPage = totalPagesCount;

        if (totalPagesCount > maxPageButtons) {
            const sideButtons = 1;
            const middleRange = maxPageButtons - 2 - sideButtons * 2;
            const middleStart = Math.max(2, currentPage - Math.floor(middleRange / 2));
            const middleEnd = Math.min(totalPagesCount - 1, middleStart + middleRange - 1);

            if (middleStart > 2) {
                pageNumbers.push(
                    <button key="1" onClick={() => paginate(1)}>
                        1
                    </button>,
                    <span key="ellipsis-start">...</span>,
                );
            }

            for (let i = middleStart; i <= middleEnd; i++) {
                pageNumbers.push(
                    <button key={i} onClick={() => paginate(i)} className={currentPage === i ? 'active' : ''}>
                        {i}
                    </button>,
                );
            }

            if (middleEnd < totalPagesCount - 1) {
                pageNumbers.push(
                    <span key="ellipsis-end">...</span>,
                    <button key={totalPagesCount} onClick={() => paginate(totalPagesCount)}>
                        {totalPagesCount}
                    </button>,
                );
            }
        } else {
            for (let i = 1; i <= totalPagesCount; i++) {
                pageNumbers.push(
                    <button key={i} onClick={() => paginate(i)} className={currentPage === i ? 'active' : ''}>
                        {i}
                    </button>,
                );
            }
        }

        return (
            <div className="pagination">
                <button onClick={() => paginate(currentPage - 1)} disabled={currentPage === 1}>
                    Trang Tr∆∞·ªõc
                </button>
                {pageNumbers}
                <button onClick={() => paginate(currentPage + 1)} disabled={currentPage === totalPagesCount}>
                    Ti·∫øp Theo
                </button>
            </div>
        );
    }, [currentPage, totalPages, paginate]);

    // üëá B·∫ÆT ƒê·∫¶U PH·∫¶N RENDER C√ì ƒêI·ªÄU KI·ªÜN üëá
    if (isLoading) {
        return <StatusDisplaySpinner isLoading={true} loadingText="ƒêang t·∫£i danh s√°ch s·∫£n ph·∫©m..." />;
    }

    return (
        <div className="products">
            <h1>Danh s√°ch s·∫£n ph·∫©m</h1>
            <div className="action-buttons">
                <p>T·ªïng s·ªë s·∫£n ph·∫©m: {product_list?.length || 0}</p>
                <Link to="/sanpham/themmoisanpham" className="toggle-btn">
                    Th√™m s·∫£n ph·∫©m m·ªõi
                </Link>
                <Link to="/sanpham/nhapkho" className="toggle-btn">
                    Nh·∫≠p th√™m h√†ng t·ªìn kho
                </Link>
                <button className="toggle-btn" onClick={exportToExcel}>
                    Xu·∫•t file Excel
                </button>
                <div className="pagination-controls">
                    <label htmlFor="productsPerPage">S·∫£n ph·∫©m/trang:</label>
                    <select id="productsPerPage" value={productsPerPage} onChange={handleProductsPerPageChange}>
                        <option value={10}>10</option>
                        <option value={20}>20</option>
                        <option value={30}>30</option>
                        <option value={50}>50</option>
                        <option value={'all'}>T·∫•t c·∫£</option>
                    </select>
                </div>
            </div>
            <table className="products-table">
                <thead>
                    <tr>
                        <th onClick={handleSortToggle} style={{ cursor: 'pointer' }}>
                            M√£ s·∫£n ph·∫©m {sortOrder === 'asc' ? '‚ñ≤' : '‚ñº'}
                        </th>
                        <th>M√£ v·∫°ch</th>
                        <th>T√™n s·∫£n ph·∫©m</th>
                        <th>Nh√≥m h√†ng</th>
                        <th>Gi√° b√°n</th>
                        <th>T·ªìn kho</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    {productsToDisplay.length > 0 ? (
                        productsToDisplay.map((product) => (
                            <ProductRow
                                key={product._id}
                                product={product}
                                urlImage={urlImage}
                                utilityFunctions={utilityFunctions}
                            />
                        ))
                    ) : (
                        <tr>
                            <td colSpan="8">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o</td>
                        </tr>
                    )}
                </tbody>
            </table>
            {totalPages > 1 && renderPaginationButtons()}
        </div>
    );
};

export default Products;
